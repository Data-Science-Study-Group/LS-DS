png("dumbell.png") # initiate
plot(gg)
dev.off() # finish
# R_sqr$methods <- factor(R_sqr$methods)
gg <- ggplot(R_sqr, aes(x=base, xend=main, y=reorder(methods, main), group=methods)) +
geom_dumbbell(colour="#a3c4dc", size=2.0, colour_xend="#0e668b") + #,
# dot_guide=TRUE, dot_guide_size=0.05) +
scale_x_continuous() + # label = percent) +
labs(x=NULL, y=NULL) + # , subtitle="base: light, main: thick") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(linetype = "dotted"),
panel.grid.minor.x=element_line(linetype = "dotted", size = 0.01),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
## Warning: Ignoring unknown parameters: point.colour.l
plot(gg)
png("dumbell.png") # initiate
plot(gg)
dev.off() # finish
# R_sqr$methods <- factor(R_sqr$methods)
gg <- ggplot(R_sqr, aes(x=base, xend=main, y=reorder(methods, main), group=methods)) +
geom_dumbbell(colour="#a3c4dc", size=2.0, colour_xend="#0e668b") + #,
# dot_guide=TRUE, dot_guide_size=0.05) +
scale_x_continuous() + # label = percent) +
labs(x=NULL, y=NULL) + # , subtitle="base: light, main: thick") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(linetype = "dotted"),
panel.grid.minor.x=element_line(linetype = "dotted", size = 0.01),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
## Warning: Ignoring unknown parameters: point.colour.l
plot(gg)
png("dumbell.png") # initiate
plot(gg)
dev.off() # finish
plot(gg)
# R_sqr$methods <- factor(R_sqr$methods)
gg <- ggplot(R_sqr, aes(x=base, xend=main, y=reorder(methods, main), group=methods)) +
geom_dumbbell(colour="#a3c4dc", size=2.0, colour_xend="#0e668b") + #,
# dot_guide=TRUE, dot_guide_size=0.05) +
scale_x_continuous() + # label = percent) +
labs(x=NULL, y=NULL) + # , subtitle="base: light, main: thick") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
# plot.background=element_rect(fill="#f7f7f7"),
# panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(linetype = "dotted"),
panel.grid.minor.x=element_line(linetype = "dotted", size = 0.01),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
## Warning: Ignoring unknown parameters: point.colour.l
plot(gg)
png("dumbell.png") # initiate
plot(gg)
dev.off() # finish
gg
# R_sqr$methods <- factor(R_sqr$methods)
gg <- ggplot(R_sqr, aes(x=base, xend=main, y=reorder(methods, -main), group=methods)) +
geom_dumbbell(colour="#a3c4dc", size=2.0, colour_xend="#0e668b") + #,
# dot_guide=TRUE, dot_guide_size=0.05) +
scale_x_continuous() + # label = percent) +
labs(x=NULL, y=NULL) + # , subtitle="base: light, main: thick") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
# plot.background=element_rect(fill="#f7f7f7"),
# panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(linetype = "dotted"),
panel.grid.minor.x=element_line(linetype = "dotted", size = 0.01),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
## Warning: Ignoring unknown parameters: point.colour.l
plot(gg)
png("dumbell.png") # initiate
plot(gg)
dev.off() # finish
## Warning: Ignoring unknown parameters: point.colour.l
plot(gg)
plot(gg)
left_join(base, main, by="methods")
left_join(base, main, by="methods") %>% order_by(R-sqr.y)
left_join(base, main, by="methods") %>% order_by(`R-sqr.y`)
left_join(base, main, by="methods")
a <- left_join(base, main, by="methods")
a <- a %>% order_by(`R-sqr.y`)
a <- left_join(base, main, by="methods")
a
a <- left_join(base, main, by="methods")
colnames(a) <- c("R2x", "adjR2x", "RMSEx", "methods", "R2y", "adjR2y", "RMSEy")
a <- a %>% order_by(R2y)
a <- a %>% arrange(R2y)
a
a <- sapply(a[,c(1:2, 5:6)], function(x) round(100*x, 1))
a
a <- left_join(base, main, by="methods")
colnames(a) <- c("R2x", "adjR2x", "RMSEx", "methods", "R2y", "adjR2y", "RMSEy")
a[,c(1:2, 5:6)] <- sapply(, function(x) round(100*x, 1))
a <- left_join(base, main, by="methods")
colnames(a) <- c("R2x", "adjR2x", "RMSEx", "methods", "R2y", "adjR2y", "RMSEy")
a[,c(1:2, 5:6)] <- sapply(a[,c(1:2, 5:6)], function(x) round(100*x, 1))
a[,c(3,7)] <- sapply(a[,c(3,7)], function(x) round(x, 1))
a <- a %>% arrange(R2y)
a
cbind(a[,4], a[,-4])
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(xts)
library(dygraphs)
head(main_rf)
knitr::opts_chunk$set(echo = TRUE)
# devtools::install_github("hrbrmstr/ggalt")
library(ggplot2)
library(dplyr)
library(ggalt)
library(plotly)
base <- data.frame(
"Linear Regression"	= c(0.654938559, 0.65041229, 670.492766),
CART = c(0.649563788, 0.644967017, 675.6944769),
"Random Forest"	= c(0.716024935, 0.712299953,	608.2554156),
AdaBoost = c(0.627527905, 0.622642082, 696.6148876),
"K-NN" = c(0.648852128,	0.644246022,	676.3802237),
"Linear SVR" = c(0.539743485,	0.53370617,	774.3652453),
"ElasticNet" = c(0.654595172,	0.650064399,	670.8263025)) %>% t() %>% data.frame()
colnames(base) <- c("R-sqr", "Adj. R-Sqr", "RMSE")
base$methods <- rownames(base)
main <- data.frame(
"Linear Regression" = c(0.72034594,	0.715800479,	603.6100265),
CART = c(0.694446176,	0.689479744,	630.9424415),
"Random Forest"	= c(0.737788388,	0.733526434,	584.482942),
AdaBoost = c(0.694296676,	0.689327814,	631.096775),
"K-NN" = c(0.696835519,	0.691907923,	628.4707058),
"Linear SVR" = c(0.627242962,	0.621184217,	696.8812932),
"ElasticNet"	= c(0.720337776,	0.715792183,	603.6188367)) %>% t() %>% data.frame()
colnames(main) <- c("R-sqr", "Adj. R-Sqr", "RMSE")
main$methods <- rownames(main)
R_sqr <- left_join(base, main, by="methods") %>%
select(methods, `R-sqr.x`, `R-sqr.y`) %>%
rename(base = `R-sqr.x`) %>%
rename(main = `R-sqr.y`) %>%
arrange(main)
R_sqr
theme_set(theme_classic())
# R_sqr$methods <- factor(R_sqr$methods)
gg <- ggplot(R_sqr, aes(x=base, xend=main, y=reorder(methods, -main), group=methods)) +
geom_dumbbell(colour="#a3c4dc", size=2.0, colour_xend="#0e668b") + #,
# dot_guide=TRUE, dot_guide_size=0.05) +
scale_x_continuous() + # label = percent) +
labs(x=NULL, y=NULL) + # , subtitle="base: light, main: thick") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
# plot.background=element_rect(fill="#f7f7f7"),
# panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(linetype = "dotted"),
panel.grid.minor.x=element_line(linetype = "dotted", size = 0.01),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
## Warning: Ignoring unknown parameters: point.colour.l
plot(gg)
# png("dumbell.png") # initiate
# plot(gg)
# dev.off() # finish
a <- left_join(base, main, by="methods")
colnames(a) <- c("R2x", "adjR2x", "RMSEx", "methods", "R2y", "adjR2y", "RMSEy")
a[,c(1:2, 5:6)] <- sapply(a[,c(1:2, 5:6)], function(x) round(100*x, 1))
a[,c(3,7)] <- sapply(a[,c(3,7)], function(x) round(x, 1))
a <- a %>% arrange(R2y)
cbind(a[,4], a[,-4])
setwd("C:\\KHU Lab\\Seulki\\R")
main_rf <- read.csv("main_pred_actual.csv", stringsAsFactors = FALSE)
theme_set(theme_classic())
a <- ggplot(main_rf, aes(pred, actual, alpha = 0.05)) + geom_point() +
geom_smooth(se = TRUE) + # geom_abline(slope = 1, intercept = 0) +
theme(panel.grid.major.y = element_line(linetype = "dotted"),
panel.grid.major.x = element_line(linetype = "dotted")) +
labs(x="predicted", y="actual")
a
library(lubridate)
library(xts)
library(dygraphs)
head(main_rf)
a <- ymd(paste(2015, 2, 6, sep="-"))
main_rf$date <- ymd_h(paste(main_rf$year, main_rf$month, main_rf$day, main_rf$hour, sep="-"))
tail(main_rf)
main_rf_xts <- xts(cbind(predicted = main_rf$pred, actual = main_rf$actual),
order.by = main_rf$date)
main_rf_xts <- main_rf_xts %>% tail(62) %>% head(-1)
a <- dygraph(main_rf_xts) %>%
dySeries("predicted", color = "red", strokeWidth = 2, strokePattern = "dashed") %>%
dyGroup(c("actual"), drawPoints = TRUE, color = c("blue")) %>%
dyOptions(drawPoints = TRUE, pointSize = 2)
a
a
# png("xts.png") # initiate
# plot(a)
# dev.off() # finish
library(webshot)
webshot("file:///C:/KHU%20Lab/Seulki/R/a2.html", "xts.png", vwidth = 800, vheight = 400)
library(lubridate)
library(xts)
library(dygraphs)
head(main_rf)
a <- ymd(paste(2015, 2, 6, sep="-"))
main_rf$date <- ymd_h(paste(main_rf$year, main_rf$month, main_rf$day, main_rf$hour, sep="-"))
tail(main_rf)
main_rf_xts <- xts(cbind(predicted = main_rf$pred, actual = main_rf$actual),
order.by = main_rf$date)
main_rf_xts <- main_rf_xts %>% tail(62) %>% head(-1)
a <- dygraph(main_rf_xts) %>%
dySeries("predicted", color = "red", strokeWidth = 2, strokePattern = "dashed") %>%
dyGroup(c("actual"), drawPoints = TRUE, color = c("blue")) %>%
dyOptions(drawPoints = TRUE, pointSize = 4)
a
a
library(lubridate)
library(xts)
library(dygraphs)
head(main_rf)
a <- ymd(paste(2015, 2, 6, sep="-"))
main_rf$date <- ymd_h(paste(main_rf$year, main_rf$month, main_rf$day, main_rf$hour, sep="-"))
tail(main_rf)
main_rf_xts <- xts(cbind(predicted = main_rf$pred, actual = main_rf$actual),
order.by = main_rf$date)
main_rf_xts <- main_rf_xts %>% tail(62) %>% head(-1)
a <- dygraph(main_rf_xts) %>%
dySeries("predicted", color = "red", strokeWidth = 2, strokePattern = "dashed") %>%
dyGroup(c("actual"), drawPoints = TRUE, color = c("blue")) %>%
dyOptions(drawPoints = TRUE, pointSize = 3)
a
a
# png("xts.png") # initiate
# plot(a)
# dev.off() # finish
library(webshot)
webshot("file:///C:/KHU%20Lab/Seulki/R/a3.html", "xts.png", vwidth = 800, vheight = 400)
getwd()
library(installr)
updateR()
sessionInfo()
install.packages(c("BH", "earth", "feather", "git2r", "htmlTable", "JuliaCall", "plotmo", "tibble"))
dataset <- read.csv("lifeCountry.csv", stringsAsFactors = FALSE)
getwd()
setwd("C:/LS-DS/classProject")
setwd("C:/LS-DS/classProject")
dataset <- read.csv("lifeCountry.csv", stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
# dataset
str(dataset) #nrow=161, ncol=11 (number of variables = 10)
TOP_GDP <- dataset %>% select(Country, GDP_per_Capita) %>% top_n(1)
TOP_GDP #Luxembourg; 107708
BOTTOM_GDP <- dataset %>% select(Country, GDP_per_Capita) %>% top_n(-1)
BOTTOM_GDP #South Sudan; 221
TOP_LIFE <- dataset %>% select(Country, Life.Expectancy) %>% top_n(1)
TOP_LIFE #Japan and Sri Lanka; 83.7
BOTTOM_LIFE <- dataset %>% select(Country, Life.Expectancy) %>% top_n(-1)
BOTTOM_LIFE #sierra Leone; 50.1
temp <- dataset %>% group_by(Continent) %>% summarise(avgGDP = mean(GDP_per_Capita), avgLIFE = mean(Life.Expectancy))
head(temp)
temp$avgGDP
temp <- dataset %>% group_by(Continent) %>% summarise(avgGDP = mean(GDP_per_Capita), avgLIFE = mean(Life.Expectancy))
temp <- dataset %>% group_by(Continent) %>% summarise(avgGDP = round(mean(GDP_per_Capita),1), avgLIFE = round(mean(Life.Expectancy),1))
temp
temp$avgGDP
str(temp)
a <- ggplot(data = dataset) + geom_point(mapping = aes(x = GDP_per_Capita, y = Life.Expectancy, color = Continent))
a
e <- ggplot(data = temp) +
geom_col(mapping = aes(x= Continent, y= avgGDP), fill='blue') +
geom_text(aes(x= Continent, y=avgGDP, label = avgGDP),vjust=1.5, color ='white')
e
f <- ggplot(data = temp) +
geom_col(mapping = aes(x= Continent,y= avgLIFE), fill= 'red') +
geom_text(aes(x= Continent, y=avgLIFE,label = avgLIFE), vjust=1.5, color = 'white')
f
library(gridExtra)
grid.arrange(e,f,ncol =2) #round(digits=2)???????ϰ???��??data??��?̾??Ƴ?
e2 <- ggplot(data = temp, mapping = aes(x= Continent, y= avgGDP)) +
geom_col(fill='blue') +
geom_text(aes(label = avgGDP),vjust=1.5, color ='white')
e2
x <- c(1,2,3,4,5,6)
m <- matrix(x, nrow = 3, ncol = 2)
n <- matrix(c(7,8,9), nrow = 3)
m
n
solve(m,n)
qr.solve(m,n)
# 0. 강의노트 마지막 페이지에 실습과제를 내드렸는데, 아직 Rmarkdown을 다루지 않았으므로 R을 이용하는 버전으로 바꿔서 아래에 내 드리겠습니다.
# 1. 이메일에 첨부된 `lifeCountry.csv`파일을 다운받으세요.
# 2. C:/LS-DS/classProject라는 폴더를 만드세요.
# 3. Rstudio를 열어서 File -> New File -> R Script를 하면 새로운 소스 파일이 생성됩니다.
# 4. 이를 File -> Save를 이용해서 위의 폴더에 `classProject1.R`이라는 파일로 저장하세요.
# 5. RStudio를 완전히 닫고 탐색기에서 `classProject1.R`을 더블클릭하여 엽니다.
setwd("C:/LS-DS/classProject")
# 6. 아래 명령을 사용해 파일을 불러옵니다.
dataset <- read.csv("lifeCountry.csv", stringsAsFactors = FALSE)
dim(dataset)
# 8. 데이터는 총 몇개의 행과 열로 되어 있습니까? (hint: str)
str(dataset)
# 9. 가장 GDP가 높고 낮은 나라는 어디인가요? 가장 기대수명이 길고 짧은 나라는 어디인가요?
dataset %>% arrange(GDP_per_Capita) %>% head(1)
# 10. 대륙별로 GDP와 기대수명의 평균을 구해보세요.
dataset %>% group_by(Continent) %>% summarise(mean(GDP_per_Capita), mean(Life.Expectancy))
# 11. 각 나라의 GDP를 x축으로, 기대수명을 y축으로 산점도를 그리고 대륙에 따라서 점의 색깔이 달라지게 해보세요.
ggplot(dataset) +
geom_point(aes(x = GDP_per_Capita, y = Life.Expextancy, color = Continent))
# 11. 각 나라의 GDP를 x축으로, 기대수명을 y축으로 산점도를 그리고 대륙에 따라서 점의 색깔이 달라지게 해보세요.
ggplot(dataset) +
geom_point(aes(x = GDP_per_Capita, y = Life.Expectancy, color = Continent))
# 12. facet을 이용해서 대륙별로 GDP와 기대수명에 대한 산점도를 그려보세요.
a + facet_wrap(~ Continent)
str(dataset)
# 13. 국가별로 성별에 따라 기대수명이 다릅니다. mutate함수를 사용해서 ageSexDiff라는 변수를 만들어 보세요.
dataset <- dataset %>%
mutate(ageSexDiff = Female - Male)
str(dataset)
# 14. 어떤 대륙에서 ageSexDiff가 가장 크고 작은가요?
continent_sexDiff <- dataset %>%
group_by(Continent) %>% summarise(mean(ageSexDiff))
# 14. 어떤 대륙에서 ageSexDiff가 가장 크고 작은가요?
continent_sexDiff <- dataset %>%
group_by(Continent) %>% summarise(mean(ageSexDiff))
# 14. 어떤 대륙에서 ageSexDiff가 가장 크고 작은가요?
dataset %>% group_by(Continent) %>% summarise(avgSexDiff = mean(ageSexDiff))
# 14. 어떤 대륙에서 ageSexDiff가 가장 크고 작은가요?
dataset %>% group_by(Continent) %>% summarise(contiSexDiff = mean(ageSexDiff)) %>% arrange(desc(contiSexDiff))
dataset %>% group_by(Continent) %>% summarise(avgMen = mean(Male), avgWomen = mean(Female))
continentGender <- dataset %>%
group_by(Continent) %>% summarise(avgMen = mean(Male), avgWomen = mean(Female)) %>% arrnage(desc(avgWomen))
ggplot(continentGender, aes(x = avgMen, xend = avgWomen, y= Continent, group = Continent)) +
geom_dumbell
# 15. 자유롭게 분석을 시작해보세요.
# Dumbell plot (p25 in M24-ggplot2_Gallery)
library(ggalt)
continentGender <- dataset %>%
group_by(Continent) %>% summarise(avgMen = mean(Male), avgWomen = mean(Female)) %>% arrnage(desc(avgWomen))
ggplot(continentGender, aes(x = avgMen, xend = avgWomen, y= Continent, group = Continent)) +
geom_dumbell()
continentGender <- dataset %>%
group_by(Continent) %>% summarise(avgMen = mean(Male), avgWomen = mean(Female)) %>% arrnage(desc(avgWomen))
continentGender <- dataset %>%
group_by(Continent) %>% summarise(avgMen = mean(Male), avgWomen = mean(Female)) %>% arrange(desc(avgWomen))
ggplot(continentGender, aes(x = avgMen, xend = avgWomen, y= Continent, group = Continent)) +
geom_dumbell()
# 15. 자유롭게 분석을 시작해보세요.
# Dumbell plot (p25 in M24-ggplot2_Gallery)
library(ggalt)
continentGender <- dataset %>%
group_by(Continent) %>% summarise(avgMen = mean(Male), avgWomen = mean(Female)) %>% arrange(desc(avgWomen))
ggplot(continentGender, aes(x = avgMen, xend = avgWomen, y= Continent, group = Continent)) +
geom_dumbell()
ggplot(continentGender, aes(x = avgMen, xend = avgWomen, y= Continent, group = Continent)) +
geom_dumbbell()
ggplot(continentGender, aes(x = avgMen, xend = avgWomen, y= reorder(Continent, -avgWomen), group = Continent)) +
geom_dumbbell()
c <- b +
labs(x=NULL, y=NULL, title="Continents difference in life expectancy",
subtitle = "left: Men, right: Women",
caption = "Source: OECD") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
b +
labs(x=NULL, y=NULL, title="Continents difference in life expectancy",
subtitle = "left: Men, right: Women",
caption = "Source: OECD")
b
b <- ggplot(continentGender,
aes(x = avgMen, xend = avgWomen, y= reorder(Continent, -avgWomen), group = Continent)) +
geom_dumbbell()
b
c <- b +
labs(x=NULL, y=NULL, title="Continents difference in life expectancy",
subtitle = "left: Men, right: Women",
caption = "Source: OECD") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
panel.grid.minor=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.major.x=element_line(),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
c
c <- b +
labs(x=NULL, y=NULL, title="Continents difference in life expectancy",
subtitle = "left: Men, right: Women",
caption = "Source: OECD") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
c
# 6. 아래 명령을 사용해 파일을 불러옵니다.
dataset <- read.csv("lifeCountry.csv", stringsAsFactors = FALSE)
str(dataset)
# 7. library(dplyr)과 library(ggplot2)를 실행합니다.
library(dplyr)
library(ggplot2)
# 8. 데이터는 총 몇개의 행과 열로 되어 있습니까? (hint: str)
str(dataset)
dim(dataset)
dataset %>% arrange(GDP_per_Capita)
dataset %>% arrange(GDP_per_Capita) %>% head(1)
dataset %>% arrange(GDP_per_Capita) %>% head()
dataset %>% arrange(GDP_per_Capita) %>% head(1)
# 9. 가장 GDP가 높고 낮은 나라는 어디인가요? 가장 기대수명이 길고 짧은 나라는 어디인가요?
dataset %>% arrange(desc(GDP_per_Capita)) %>% head(1)
# 9. 가장 GDP가 높고 낮은 나라는 어디인가요? 가장 기대수명이 길고 짧은 나라는 어디인가요?
dataset %>% arrange(desc(GDP_per_Capita)) %>% head(1)
dataset %>% arrange(GDP_per_Capita) %>% head(1)
dataset %>% arrange(desc(Life.Expectancy)) %>% head(1)
dataset %>% arrange(Life.Expectancy) %>% head(1)
# 10. 대륙별로 GDP와 기대수명의 평균을 구해보세요.
dataset %>% group_by(Continent) %>% summarise(mean(GDP_per_Capita), mean(Life.Expectancy))
# 11. 각 나라의 GDP를 x축으로, 기대수명을 y축으로 산점도를 그리고 대륙에 따라서 점의 색깔이 달라지게 해보세요.
a <- ggplot(dataset) +
geom_point(aes(x = GDP_per_Capita, y = Life.Expectancy, color = Continent))
a
head(dataset)
# 13. 국가별로 성별에 따라 기대수명이 다릅니다.
# mutate함수를 사용해서 ageSexDiff라는 변수를 만들어 보세요.
dataset <- dataset %>% mutate(ageSexDiff = Female - Male)
str(dataset)
dataset %>%
group_by(Continent) %>%
summarise(contiSexDiff = mean(ageSexDiff))
dataset %>%
group_by(Continent) %>%
summarise(contiSexDiff = mean(ageSexDiff)) %>%
arrange(desc(contiSexDiff))
b <- ggplot(continentGender,
aes(x = avgMen,
xend = avgWomen,
y= Continent, # reorder(Continent, -avgWomen),
group = Continent)) +
geom_dumbbell()
continentGender <- dataset %>%
group_by(Continent) %>%
summarise(avgMen = mean(Male), avgWomen = mean(Female)) %>%
arrange(desc(avgWomen))
b <- ggplot(continentGender,
aes(x = avgMen,
xend = avgWomen,
y= Continent, # reorder(Continent, -avgWomen),
group = Continent)) +
geom_dumbbell()
# 15. 자유롭게 분석을 시작해보세요.
# Dumbell plot (p25 in M24-ggplot2_Gallery)
library(ggalt)
continentGender <- dataset %>%
group_by(Continent) %>%
summarise(avgMen = mean(Male), avgWomen = mean(Female)) %>%
arrange(desc(avgWomen))
b <- ggplot(continentGender,
aes(x = avgMen,
xend = avgWomen,
y= Continent, # reorder(Continent, -avgWomen),
group = Continent)) +
geom_dumbbell()
b
b <- ggplot(continentGender,
aes(x = avgMen,
xend = avgWomen,
y= reorder(Continent, -avgWomen),
group = Continent)) +
geom_dumbbell()
b
c <- b +
labs(x=NULL, y=NULL, title="Continents difference in life expectancy",
subtitle = "left: Men, right: Women",
caption = "Source: OECD") +
theme(plot.title = element_text(hjust=0.5, face="bold"),
plot.background=element_rect(fill="#f7f7f7"),
panel.background=element_rect(fill="#f7f7f7"),
axis.ticks=element_blank(),
legend.position="top",
panel.border=element_blank())
c
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/LS-DS/classProject")
dataset <- read.csv("lifeCountry.csv", stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
str(dataset)
dim(dataset)
dataset %>% arrange(desc(GDP_per_Capita)) %>% head(1)
dataset %>% arrange(desc(GDP_per_Capita)) %>% head(1) %>% select(Country)
