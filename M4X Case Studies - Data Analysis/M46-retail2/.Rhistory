library(stringr)
a <- Sys.time()
# for (i in 1:nrow(purchaseCount)) {
#   for (j in 1:nrow(purchaseCount)) {
for (i in 1:20) {
for (j in 1:20) {
x <- sum(str_detect(purchase$Purchase, uProductID[i]) &
str_detect(purchase$Purchase, uProductID[j]))
print(paste(i, j, x))
purchaseCount[i,j] <- x
}
}
b <- Sys.time()
i
str_detect(purchase$Purchase, uProductID[i])
purchase$Purchase
purchase$Purchases %>% head(20)
uProductID %>% head(10)
purchase <- dataset2 %>%
group_by(CustomerID) %>%
summarise(
Purchases =
paste(ProductID, collapse = " "))
head(purchase)
head(purchase)
str_detect(purchase$Purchase, "prod00384")
str_detect(purchase$Purchases, "prod00384")
for (i in 1:20) {
for (j in 1:20) {
x <- sum(str_detect(purchase$Purchases, uProductID[i]) &
str_detect(purchase$Purchases, uProductID[j]))
print(paste(i, j, x))
purchaseCount[i,j] <- x
}
}
purchaseCount[1:20,1:20]
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(background = '718CBA')
library(tidyverse) # dplyr + ggplot2 + tidyr + ...
library(readxl)
dataset <- read_excel("retail.xlsx")
str(dataset)
colnames(dataset)
dataset %>% select(`Product Name`, `Customer Name`) %>% head()
dataset %>% select(`Product Name`, `Customer Name`) %>%
sapply(function(x) length(unique(x)))
customerTable <- dataset %>% select(`Postal Code`, `Customer Name`) %>% unique()
customerTable %>% head()
dim(customerTable)
library(stringr)
x <- str_pad(1:nrow(customerTable), 5, pad = "0") # make 5-digit string by padding "0"
head(x, 3)
customerTable$CustomerID <- paste0("cus", x)
customerTable %>% head(3)
productTable <- dataset %>% select(Manufacturer,`Product Name`) %>% unique()
productTable <- productTable %>%
mutate(ProductID = paste0("prod", str_pad(1:nrow(productTable), 5, pad = "0")))
productTable %>% head(3)
head(dataset[,c(5, 11:12)], 2)
head(customerTable, 2)
dataset <- left_join(x = dataset, y = customerTable,
by = c("Postal Code", "Customer Name"))
dataset[c(5, 11:12, 21)] %>% head(2)
dataset <- left_join(x = dataset, y = productTable,
by = c("Manufacturer", "Product Name"))
dataset2 <- dataset %>%
select(CustomerID, ProductID, `Postal Code`,
`Customer Name`, Manufacturer, `Product Name`) %>%
arrange(CustomerID, ProductID)
dataset2[108:110,]
dataset2 %>%
select(CustomerID, ProductID) %>%
head()
purchase <- dataset2 %>%
group_by(CustomerID) %>%
summarise(
Purchases =
paste(ProductID, collapse = " "))
head(purchase)
uProductID <- unique(dataset2$ProductID)
purchaseCount <-
array(0, c(length(uProductID),length(uProductID)))
colnames(purchaseCount) <- uProductID
rownames(purchaseCount) <- uProductID
purchaseCount[1:4,1:3]
purchase$Purchases %>% head(3)
library(stringr)
a <- Sys.time()
for (i in 1:nrow(purchaseCount)) {
for (j in 1:nrow(purchaseCount)) {
purchaseCount[i,j] <-
sum(
str_detect(purchase$Purchases, uProductID[i]) &
str_detect(purchase$Purchases, uProductID[j]))
}
}
b <- Sys.time()
a
b
save.image(file = "M46_middle.Rdata")
alarm()
alarm()
alarm()
alarm()
alarm()
install.packages("beepr")
beep()
library(beepr)
beep()
a
b
a-b
a
b
b-a
purchaseCount[1:4,1:3]
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(background = '718CBA')
library(tidyverse) # dplyr + ggplot2 + tidyr + ...
library(readxl)
dataset <- read_excel("retail.xlsx")
str(dataset)
colnames(dataset)
dataset %>% select(`Product Name`, `Customer Name`) %>% head()
dataset %>% select(`Product Name`, `Customer Name`) %>%
sapply(function(x) length(unique(x)))
customerTable <- dataset %>% select(`Postal Code`, `Customer Name`) %>% unique()
customerTable %>% head()
dim(customerTable)
library(stringr)
x <- str_pad(1:nrow(customerTable), 5, pad = "0") # make 5-digit string by padding "0"
head(x, 3)
customerTable$CustomerID <- paste0("cus", x)
customerTable %>% head(3)
productTable <- dataset %>% select(Manufacturer,`Product Name`) %>% unique()
productTable <- productTable %>%
mutate(ProductID = paste0("prod", str_pad(1:nrow(productTable), 5, pad = "0")))
productTable %>% head(3)
head(dataset[,c(5, 11:12)], 2)
head(customerTable, 2)
dataset <- left_join(x = dataset, y = customerTable,
by = c("Postal Code", "Customer Name"))
dataset[c(5, 11:12, 21)] %>% head(2)
dataset <- left_join(x = dataset, y = productTable,
by = c("Manufacturer", "Product Name"))
dataset2 <- dataset %>%
select(CustomerID, ProductID, `Postal Code`,
`Customer Name`, Manufacturer, `Product Name`) %>%
arrange(CustomerID, ProductID)
dataset2[108:110,]
dataset2 %>%
select(CustomerID, ProductID) %>%
head()
purchase <- dataset2 %>%
group_by(CustomerID) %>%
summarise(
Purchases =
paste(ProductID, collapse = " "))
head(purchase)
uProductID <- unique(dataset2$ProductID)
purchaseCount <-
array(0, c(length(uProductID),length(uProductID)))
colnames(purchaseCount) <- uProductID
rownames(purchaseCount) <- uProductID
purchaseCount[1:4,1:3]
purchase$Purchases %>% head(3)
load("M46_middle.Rdata")
purchaseCount[1:4,1:3]
a
b
b-a
pairCount <- colSums(purchaseCount) - diag(purchaseCount)
pairCount <- sort(pairCount, decreasing = TRUE)
head(pairCount)
mat_size <- 8
pair_mat <- purchaseCount[names(pairCount[1:mat_size]),
names(pairCount[1:mat_size])]
pair_mat %>% head()
pair_mat_name <-
left_join(data.frame(ProductID = colnames(pair_mat)), productTable)
pair_mat_name %>% head()
rownames(pair_mat) <- pair_mat_name[,"Product Name"] %>% substr(1,20)
pair_mat
topPair_N <- 10
# Replace diagonals to 0
purchaseCount_offdiag <- purchaseCount
diag(purchaseCount_offdiag) <- 0
# Find >=2 counts and build data.frame
top_indexes <-
which(purchaseCount_offdiag >= 2, arr.ind = TRUE) %>% data.frame()
Top_N <- data.frame(
ID_x = apply(top_indexes, 1,
function(x) colnames(purchaseCount_offdiag)[x[1]]),
ID_y = apply(top_indexes, 1,
function(x) colnames(purchaseCount_offdiag)[x[2]]),
count = apply(top_indexes, 1,
function(x) purchaseCount_offdiag[x[1], x[2]]),
stringsAsFactors = FALSE,
row.names = NULL
)
# replace ID with `ProductID` using `left_join`
Top_N <- Top_N %>%
left_join(productTable, by = c("ID_x"="ProductID")) %>%
select(`Product Name`, ID_y, count) %>%
left_join(productTable, by = c("ID_y"="ProductID")) %>%
select(`Product Name.x`, `Product Name.y`, count)
Top_N[,1] <- substr(Top_N[,1], 1, 30)
Top_N[,2] <- substr(Top_N[,2], 1, 30)
Top_N[sample(1:nrow(Top_N), topPair_N),]
library(ggplot2)
library(ggcorrplot)
data(mtcars)
corr <- round(cor(mtcars), 1)
fig_sample <-
ggcorrplot(
corr, hc.order = TRUE, type = "lower", lab = TRUE,
lab_size = 3, method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars", ggtheme=theme_bw)
fig_sample
colnames(pair_mat) <- rownames(pair_mat)
fig_corr <-
ggcorrplot(
pair_mat, hc.order = TRUE, type = "lower", lab = TRUE,
lab_size = 3, method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars", ggtheme=theme_bw)
fig_corr
save.image("M46_final.Rdata")
load("M46_final.Rdata")
install.packages(c("checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "e1071", "forecast", "gbm", "highcharter", "kableExtra", "openssl", "pdftools", "RcppArmadillo", "rlang", "rsconnect", "rstudioapi", "showtext", "SnowballC", "TH.data", "tibble", "tinytex"))
install.packages(c("checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "e1071", "forecast", "gbm", "highcharter", "kableExtra", "openssl", "pdftools", "RcppArmadillo", "rlang", "rsconnect", "rstudioapi", "showtext", "SnowballC", "TH.data", "tibble", "tinytex"))
install.packages(c("checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "e1071", "forecast", "gbm", "highcharter", "kableExtra", "openssl", "pdftools", "RcppArmadillo", "rlang", "rsconnect", "rstudioapi", "showtext", "SnowballC", "TH.data", "tibble", "tinytex"))
# renderPrint(input$mat_size)
input$mat_size <- 8
pair_mat <- purchaseCount[names(pairCount[1:input$mat_size]),
names(pairCount[1:input$mat_size])]
pair_mat_name <-
left_join(data.frame(ProductID = colnames(pair_mat)), productTable)
rownames(pair_mat) <- pair_mat_name[,"Product Name"] %>% substr(1,20)
colnames(pair_mat) <- rownames(pair_mat)
library(ggplot2)
library(ggcorrplot)
fig_corr <-
ggcorrplot(
pair_mat, hc.order = TRUE, type = "lower", lab = TRUE,
lab_size = 3, method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars", ggtheme=theme_bw)
renderPlot(fig_corr)
load("M46_final.Rdata")
load("M46_final.Rdata")
# renderPrint(input$mat_size)
input$mat_size <- 8
pair_mat <- purchaseCount[names(pairCount[1:input$mat_size]),
names(pairCount[1:input$mat_size])]
pair_mat_name <-
left_join(data.frame(ProductID = colnames(pair_mat)), productTable)
rownames(pair_mat) <- pair_mat_name[,"Product Name"] %>% substr(1,20)
colnames(pair_mat) <- rownames(pair_mat)
library(ggplot2)
library(ggcorrplot)
fig_corr <-
ggcorrplot(
pair_mat, hc.order = TRUE, type = "lower", lab = TRUE,
lab_size = 3, method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars", ggtheme=theme_bw)
fig_corr
# renderPrint(input$mat_size)
# input$mat_size <- 8
pair_mat <- purchaseCount[names(pairCount[1:input$mat_size]),
names(pairCount[1:input$mat_size])]
pair_mat_name <-
left_join(data.frame(ProductID = colnames(pair_mat)), productTable)
rownames(pair_mat) <- pair_mat_name[,"Product Name"] %>% substr(1,20)
colnames(pair_mat) <- rownames(pair_mat)
library(ggplot2)
library(ggcorrplot)
fig_corr <-
ggcorrplot(
pair_mat, hc.order = TRUE, type = "lower", lab = TRUE,
lab_size = 3, method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars", ggtheme=theme_bw)
renderPrint(fig_corr)
# renderPrint(input$mat_size)
# input$mat_size <- 8
pair_mat <- purchaseCount[names(pairCount[1:input$mat_size]),
names(pairCount[1:input$mat_size])]
pair_mat_name <-
left_join(data.frame(ProductID = colnames(pair_mat)), productTable)
rownames(pair_mat) <- pair_mat_name[,"Product Name"] %>% substr(1,20)
colnames(pair_mat) <- rownames(pair_mat)
library(ggplot2)
library(ggcorrplot)
fig_corr <-
ggcorrplot(
pair_mat, hc.order = TRUE, type = "lower", lab = TRUE,
lab_size = 3, method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars", ggtheme=theme_bw)
renderTable(pair_mat)
# renderPrint(fig_corr)
load("M46_final.Rdata")
ls()
input$topPair_N <- 10
# Replace diagonals to 0
purchaseCount_offdiag <- purchaseCount
diag(purchaseCount_offdiag) <- 0
# Find >=2 counts and build data.frame
top_indexes <-
which(purchaseCount_offdiag >= 2, arr.ind = TRUE) %>% data.frame()
input <- NULL
input$topPair_N <- 10
# Replace diagonals to 0
purchaseCount_offdiag <- purchaseCount
diag(purchaseCount_offdiag) <- 0
# Find >=2 counts and build data.frame
top_indexes <-
which(purchaseCount_offdiag >= 2, arr.ind = TRUE) %>% data.frame()
Top_N <- data.frame(
ID_x = apply(top_indexes, 1,
function(x) colnames(purchaseCount_offdiag)[x[1]]),
ID_y = apply(top_indexes, 1,
function(x) colnames(purchaseCount_offdiag)[x[2]]),
count = apply(top_indexes, 1,
function(x) purchaseCount_offdiag[x[1], x[2]]),
stringsAsFactors = FALSE,
row.names = NULL
)
# replace ID with `ProductID` using `left_join`
Top_N <- Top_N %>%
left_join(productTable, by = c("ID_x"="ProductID")) %>%
select(`Product Name`, ID_y, count) %>%
left_join(productTable, by = c("ID_y"="ProductID")) %>%
select(`Product Name.x`, `Product Name.y`, count)
Top_N[,1] <- substr(Top_N[,1], 1, 30)
library(dplyr)
input <- NULL
input$topPair_N <- 10
# Replace diagonals to 0
purchaseCount_offdiag <- purchaseCount
diag(purchaseCount_offdiag) <- 0
# Find >=2 counts and build data.frame
top_indexes <-
which(purchaseCount_offdiag >= 2, arr.ind = TRUE) %>% data.frame()
Top_N <- data.frame(
ID_x = apply(top_indexes, 1,
function(x) colnames(purchaseCount_offdiag)[x[1]]),
ID_y = apply(top_indexes, 1,
function(x) colnames(purchaseCount_offdiag)[x[2]]),
count = apply(top_indexes, 1,
function(x) purchaseCount_offdiag[x[1], x[2]]),
stringsAsFactors = FALSE,
row.names = NULL
)
# replace ID with `ProductID` using `left_join`
Top_N <- Top_N %>%
left_join(productTable, by = c("ID_x"="ProductID")) %>%
select(`Product Name`, ID_y, count) %>%
left_join(productTable, by = c("ID_y"="ProductID")) %>%
select(`Product Name.x`, `Product Name.y`, count)
Top_N[,1] <- substr(Top_N[,1], 1, 30)
Top_N[,2] <- substr(Top_N[,2], 1, 30)
Top_N[sample(1:nrow(Top_N), input$topPair_N$topPair_N),]
Top_N[sample(1:nrow(Top_N), input$topPair_N),]
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(background = '718CBA')
library(tidyverse) # dplyr + ggplot2 + tidyr + ...
library(readxl)
dataset <- read_excel("retail.xlsx")
str(dataset)
colnames(dataset)
dataset %>% select(`Product Name`, `Customer Name`) %>% head()
dataset %>% select(`Product Name`, `Customer Name`) %>%
sapply(function(x) length(unique(x)))
customerTable <- dataset %>% select(`Postal Code`, `Customer Name`) %>% unique()
customerTable %>% head()
dim(customerTable)
library(stringr)
x <- 1:nrow(customerTable) %>% str_pad(5, pad = "0") # make 5-digit string by padding "0"
head(x, 3)
customerTable$CustomerID <- paste0("cus", x)
customerTable %>% head(3)
productTable <- dataset %>% select(Manufacturer,`Product Name`) %>% unique()
productTable <- productTable %>%
mutate(ProductID = paste0("prod",
1:nrow(productTable) %>% str_pad(5, pad = "0")))
productTable %>% head(3)
head(dataset[,c(5, 11:12)], 2)
head(customerTable, 2)
dataset <- left_join(x = dataset, y = customerTable,
by = c("Postal Code", "Customer Name"))
dataset[c(5, 11:12, 21)] %>% head(2)
dataset <- left_join(x = dataset, y = productTable,
by = c("Manufacturer", "Product Name"))
dataset2 <- dataset %>%
select(CustomerID, ProductID, `Postal Code`,
`Customer Name`, Manufacturer, `Product Name`) %>%
arrange(CustomerID, ProductID)
dataset2[108:110,]
dataset2 %>%
select(CustomerID, ProductID) %>%
head()
purchase <- dataset2 %>%
group_by(CustomerID) %>%
summarise(
Purchases =
paste(ProductID, collapse = " "))
head(purchase)
uProductID <- unique(dataset2$ProductID)
purchaseCount <-
array(0, c(length(uProductID),length(uProductID)))
colnames(purchaseCount) <- uProductID
rownames(purchaseCount) <- uProductID
purchaseCount[1:4,1:3]
purchase$Purchases %>% head(3)
load("M46_middle.Rdata")
purchaseCount[1:4,1:3]
a
b
b-a
pairCount <- colSums(purchaseCount) - diag(purchaseCount)
pairCount <- sort(pairCount, decreasing = TRUE)
head(pairCount)
mat_size <- 8
pair_mat <- purchaseCount[names(pairCount[1:mat_size]),
names(pairCount[1:mat_size])]
pair_mat %>% head()
pair_mat_name <-
left_join(data.frame(ProductID = colnames(pair_mat)), productTable)
pair_mat_name %>% head()
rownames(pair_mat) <- pair_mat_name[,"Product Name"] %>% substr(1,20)
pair_mat
topPair_N <- 10
# Replace diagonals to 0
purchaseCount_offdiag <- purchaseCount
diag(purchaseCount_offdiag) <- 0
# Find >=2 counts and build data.frame
top_indexes <-
which(purchaseCount_offdiag >= 2, arr.ind = TRUE) %>% data.frame()
top_indexes %>% head()
colnames(purchaseCount_offdiag) %>% head()
Top_N <- data.frame(
ID_x = apply(top_indexes, 1,
function(x) colnames(purchaseCount_offdiag)[x[1]]),
ID_y = apply(top_indexes, 1,
function(x) colnames(purchaseCount_offdiag)[x[2]]),
count = apply(top_indexes, 1,
function(x) purchaseCount_offdiag[x[1], x[2]]),
stringsAsFactors = FALSE,
row.names = NULL
)
# replace ID with `ProductID` using `left_join`
Top_N <- Top_N %>%
left_join(productTable, by = c("ID_x"="ProductID")) %>%
select(`Product Name`, ID_y, count) %>%
left_join(productTable, by = c("ID_y"="ProductID")) %>%
select(`Product Name.x`, `Product Name.y`, count)
Top_N[,1] <- substr(Top_N[,1], 1, 30)
Top_N[,2] <- substr(Top_N[,2], 1, 30)
head(Top_N)
Top_N[,1] <- substr(Top_N[,1], 1, 30)
Top_N[,2] <- substr(Top_N[,2], 1, 30)
Top_N %>% head(2)
library(shiny)
library(shiny)
# numericInput
numericInput(inputId = "mat_size", label = "Choose mat_size", value = 10,
min = 8, max = 14, step = 2)
# sliderInput
# shiny inputs defined here
renderPrint({
input$mat_size
})
input <- NULL
input <- NULL
input$mat_size <- 10
# renderPrint({
input$mat_size
load("M46_final.Rdata")
input <- NULL
input$mat_size <- 10
# renderPrint({
input$mat_size
mat_size <- 8
pair_mat <- purchaseCount[names(pairCount[1:input$mat_size]),
names(pairCount[1:input$mat_size])]
pair_mat
pair_mat <- purchaseCount[names(pairCount[1:input$mat_size]),
names(pairCount[1:input$mat_size])]
pair_mat_name <-
left_join(data.frame(ProductID = colnames(pair_mat)), productTable)
library(dplyr)
pair_mat_name <-
left_join(data.frame(ProductID = colnames(pair_mat)), productTable)
rownames(pair_mat) <- pair_mat_name[,"Product Name"] %>% substr(1,20)
pair_mat
library(ggplot2)
library(ggcorrplot)
colnames(pair_mat) <- rownames(pair_mat)
fig_corr <-
ggcorrplot(
pair_mat, hc.order = TRUE, type = "lower", lab = TRUE,
lab_size = 3, method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars", ggtheme=theme_bw)
fig_corr
